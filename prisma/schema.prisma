// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id            String         @id @default(cuid())
  employeeId    String         @unique
  name          String
  joiningDate   DateTime
  basicSalary   Float
  tasks         Task[]
  salaryRecords SalaryRecord[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id           String    @id @default(cuid())
  name         String
  description  String?
  tasks        Task[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  priority    Priority
  status      TaskStatus
  assignedTo  Employee?  @relation(fields: [employeeId], references: [id])
  employeeId  String?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SalaryRecord {
  id          String    @id @default(cuid())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  month       DateTime
  basicSalary Float
  bonus       Float     @default(0)
  deduction   Float     @default(0)
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}
